import { useEffect, useState, useCallback } from 'react';
import { getClients, getAppointments, postAppointment } from './api/wellness-api.js';
// import './App.css';
import axios from 'axios';

function App() {
  const [clients, setClients] = useState([]);
  const [appointments, setAppointments] = useState([]);
  const [loadingClients, setLoadingClients] = useState(true);
  const [loadingAppointments, setLoadingAppointments] = useState(true);
  const [errorClients, setErrorClients] = useState(null);
  const [errorAppointments, setErrorAppointments] = useState(null);
  const [currentPage, setCurrentPage] = useState('clients'); // 'clients', 'appointments', 'schedule'


  useEffect(() => {
    const fetchData = async () => {
      try {
        const clientsData = await getClients();
        console.log('clientsData:', clientsData);
        const appointmentsData = await getAppointments();
        console.log('appointmentsData:', appointmentsData);
        setClients(clientsData);
        setAppointments(appointmentsData);
        setLoadingAppointments(true);
        setLoadingClients(true);
      } catch (err) {
        console.error('API fetch error:', err);
      } finally {
      }
    };

    fetchData();
  }, []);
  // Fetch clients data
  // Fetch clients data
  const fetchClients = useCallback(async () => {
    setLoadingClients(true);
    setErrorClients(null);
    try {
      const response = await getClients();
      setClients(response);
      setLoadingClients(false);
    } catch (err) {
      setErrorClients('hello error fetching clients.');
      console.error('Fetch clients error:', err);
    } finally {
      setLoadingClients(false);
    }
  }, []);


  // Fetch appointments data (now fetches all appointments)
  const fetchAppointments = useCallback(async () => {
    setLoadingAppointments(true);
    setErrorAppointments(null);
    try {
      const response = await getAppointments();
      setAppointments(response);
    } catch (err) {
      setErrorAppointments('Network error fetching appointments.');
      console.error('Fetch appointments error:', err);
    } finally {
      setLoadingAppointments(false);
    }
  }, []);

  // Initial data fetch on component mount
  useEffect(() => {
    fetchClients();
    fetchAppointments();
  }, [fetchClients, fetchAppointments]);

  // Periodic Sync
  useEffect(() => {
    const syncInterval = setInterval(() => {
      console.log('Performing periodic data sync...');
      fetchClients();
      fetchAppointments();
    }, 10000000); // Sync every 10 seconds

    return () => clearInterval(syncInterval); // Cleanup on unmount
  }, [fetchClients, fetchAppointments]);

  const handleScheduleSuccess = () => {
    fetchAppointments(); // Refresh appointments after scheduling
  };

  return (
    <>
      <div className="container">
        <div className="nav-bar">
          <button
            className={`nav-button ${currentPage === 'clients' ? 'active' : ''}`}
            onClick={() => setCurrentPage('clients')}
          >
            Clients
          </button>
          <button
            className={`nav-button ${currentPage === 'appointments' ? 'active' : ''}`}
            onClick={() => setCurrentPage('appointments')}
          >
            Appointments
          </button>
          <button
            className={`nav-button ${currentPage === 'schedule' ? 'active' : ''}`}
            onClick={() => setCurrentPage('schedule')}
          >
            Schedule Appointment
          </button>
        </div>
        {currentPage === 'clients' && (
          <ClientList clients={clients} loadingClients={loadingClients} error={errorClients} />
        )}

        {currentPage === 'appointments' && (
          <AppointmentList appointments={appointments} clients={clients} loadingAppointments={loadingAppointments} error={errorAppointments} />
        )}

        {currentPage === 'schedule' && (
          <AppointmentForm clients={clients} onScheduleAppointment={handleScheduleSuccess} />
        )}

      </div>
    </>
  );
}

export default App;

// ClientList Component
// ClientList Component
const ClientList = ({ clients, loading, error }) => {
  return (
    <div className="card">
      <h2>Client List</h2>
      {loading && <p>Loading clients...</p>}
      {error && <p className="error">Error: {error}</p>}
      {!loading && !error && clients.length === 0 && <p>No clients found.</p>}
      {!loading && !error && clients.length > 0 && (
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone</th>
            </tr>
          </thead>
          <tbody>
            {clients.map(client => (
              <tr key={client.id}>
                <td>{client.name}</td>
                <td>{client.email}</td>
                <td>{client.phone}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

// AppointmentList Component

const AppointmentList = ({ appointments, clients, loadingClients, error }) => {
  const [deletingId, setDeletingId] = useState(null);
  const [selectedClientId, setSelectedClientId] = useState('');
  const [localAppointments, setLocalAppointments] = useState(appointments);
  const [loadingAppointments, setLoadingAppointments] = useState(false);
  const [errorAppointments, setErrorAppointments] = useState(null);

  const clientMap = new Map(clients.map(client => [client.id, client.name]));
  console.log('localAppointments', localAppointments)
  // Fetch appointments when selectedClientId changes
  useEffect(() => {
    setLocalAppointments(appointments);
  }, [appointments]);
  // Handle appointment deletion
  const handleScheduleSuccess = () => {
    fetchAppointmentsForClient(selectedClientId); // Refresh appointments for selected client
  };
  // Handle appointment deletion
  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure you want to delete this appointment?')) return;
    setDeletingId(id);
    try {
      await axios.delete(`http://localhost:3000/appointments/${id}`);
      setLocalAppointments(prev => prev.filter(appt => appt.id !== id));
    } catch (err) {
      alert('Failed to delete appointment.');
      console.error('Delete error:', err);
    } finally {
      setDeletingId(null);
    }
  };
  const fetchAppointmentsForClient = useCallback(async (clientId) => {
    setLoadingAppointments(true);
    setErrorAppointments(null);
    try {
      const response = await getAppointments();
      if (clientId) {
        setLocalAppointments(response.filter(appt => appt.client_id === parseInt(clientId)));
      } else {
        setLocalAppointments(response);
      }
    } catch (err) {
      setErrorAppointments('Error fetching appointments.');
      console.error('Fetch appointments error:', err);
    } finally {
      setLoadingAppointments(false);
    }
  }, []);
  // Fetch appointments when component mounts or selectedClientId changes
  useEffect(() => {
    if (selectedClientId) {
      fetchAppointmentsForClient(selectedClientId);
    } else {
      setLocalAppointments([]); // Clear appointments if no client is selected
    }
  }, [selectedClientId, fetchAppointmentsForClient]);

  return (
    <div className="card">
      <h2>Upcoming Appointments</h2>
      {loadingAppointments && <p>Loading appointments...</p>}
      {error && <p className="error">Error: {error}</p>}
      {!loadingAppointments && !error && localAppointments.length === 0 && <p>No upcoming appointments found.</p>}
      {!loadingAppointments && !error && localAppointments.length > 0 && (
        <table>
          <thead>
            <tr>
              <th>Client</th>
              <th>Time</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            {localAppointments.map(appt => (
              <tr key={appt.id}>
                <td>{clientMap.get(appt.client_id)}</td>
                <td>{new Date(appt.time).toLocaleString([], { dateStyle: 'short', timeStyle: 'short' })}</td>
                <td>
                  <button
                    className="button button-danger"
                    onClick={() => handleDelete(appt.id)}
                    disabled={deletingId === appt.id}
                  >
                    {deletingId === appt.id ? 'Deleting...' : 'Delete'}
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>

  );
};

const AppointmentForm = ({ clients, onScheduleAppointment }) => {
  const [clientId, setClientId] = useState('');
  const [date, setDate] = useState('');
  const [time, setTime] = useState('');
  const [description, setDescription] = useState('Scheduled Appointment'); // Default description
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState(''); // 'success' or 'error'

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage(''); // Clear previous messages

    if (!clientId || !date || !time) {
      setMessage('Please fill in all required fields (Client, Date, Time).');
      setMessageType('error');
      return;
    }

    try {
      // Combine date and time into a single ISO string for the 'time' field
      const dateTimeISO = new Date(`${date}T${time}`).toISOString();

      // Send data in the nested 'appointment' format expected by Ruby controller

      const response = await axios.post('http://localhost:3000/appointments', {
        appointment: {
          client_id: parseInt(clientId),
          time: dateTimeISO,
        }
      });

      if (response.status === 201) {
        setMessage(response.message);
        setMessageType('success');
        // Clear form
        setClientId('');
        setDate('');
        setTime('');
        // No need to clear description as it's default
        onScheduleAppointment(); // Trigger data refresh in parent
      } else {
        setMessage(response.message || 'Failed to schedule appointment.');
        setMessageType('error');
      }
    } catch (err) {
      setMessage(err.message || 'An error occurred while scheduling.');
      setMessageType('error');
      console.error('Schedule error:', err);
    }
  };

  // Get today's date in YYYY-MM-DD format for min attribute
  const getTodayDate = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
    const day = String(today.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  return (
    <div className="card">
      <h2>Schedule New Appointment</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="client-select">Client:</label>
          <select
            id="client-select"
            value={clientId}
            onChange={(e) => setClientId(e.target.value)}
            required
          >
            <option value="">Select a client</option>
            {clients.map(client => (
              <option key={client.id} value={client.id}>
                {client.name}
              </option>
            ))}
          </select>
        </div>
        <div className="form-group-inline"> {/* New container for inline date/time */}
          <div className="form-group-half">
            <label htmlFor="appointment-date">Date:</label>
            <input
              type="date"
              id="appointment-date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              min={getTodayDate()} // Prevent selecting past dates
              required
            />
          </div>
          <div className="form-group-half">
            <label htmlFor="appointment-time">Time:</label>
            <input
              type="time"
              id="appointment-time"
              value={time}
              onChange={(e) => setTime(e.target.value)}
              required
            />
          </div>
        </div>
        {/* Description input removed as per request */}
        <button type="submit" className="button">Schedule Appointment</button>
      </form>
      {message && <p className={`message ${messageType}`}>{message}</p>}
    </div>
  );
};



// const AppointmentForm = () => {
//   const [clients, setClients] = useState([]);
//   const [selectedClientId, setSelectedClientId] = useState('');
//   const [appointmentTime, setAppointmentTime] = useState('');
//   const [message, setMessage] = useState('');

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     if (!selectedClientId || !appointmentTime) {
//       setMessage("Please select a client and time.");
//       return;
//     }

//     try {
//       await axios.post('http://localhost:3000/appointments', {
//         appointment: {
//           client_id: selectedClientId,
//           time: appointmentTime
//         }
//       });

//       setMessage("Appointment booked successfully.");
//       setAppointmentTime('');
//       setSelectedClientId('');
//     } catch (error) {
//       setMessage("Failed to book appointment.");
//       console.error(error);
//     }
//   };

//   return (
//     <div className="p-4 max-w-md mx-auto border rounded shadow">
//       <h2 className="text-xl font-semibold mb-4">Book Appointment</h2>
//       <form onSubmit={handleSubmit} className="space-y-4">
//         <div>
//           <label className="block text-sm font-medium">Select Client</label>
//           <select
//             value={selectedClientId}
//             onChange={(e) => setSelectedClientId(e.target.value)}
//             className="w-full mt-1 p-2 border rounded"
//           >
//             <option value="">-- Choose Client --</option>
//             {clients.map(client => (
//               <option key={client.id} value={client.id}>
//                 {client.name} ({client.email})
//               </option>
//             ))}
//           </select>
//         </div>

//         <div>
//           <label className="block text-sm font-medium">Appointment Time</label>
//           <input
//             type="datetime-local"
//             value={appointmentTime}
//             onChange={(e) => setAppointmentTime(e.target.value)}
//             className="w-full mt-1 p-2 border rounded"
//           />
//         </div>

//         <button
//           type="submit"
//           className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
//         >
//           Book Appointment
//         </button>

//         {message && <p className="mt-3 text-sm">{message}</p>}
//       </form>
//     </div>
//   );
// };

// AppointmentForm Component
// AppointmentForm Component
// const AppointmentForm = ({ clients, onScheduleAppointment }) => {
//   const [clientId, setClientId] = useState('');
//   const [date, setDate] = useState('');
//   const [time, setTime] = useState('');
//   const [description, setDescription] = useState(''); // Keep description state for API, but remove input
//   const [message, setMessage] = useState('');
//   const [messageType, setMessageType] = useState(''); // 'success' or 'error'

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     setMessage(''); // Clear previous messages

//     // Description is now optional or can be set to a default value if removed from UI
//     if (!clientId || !date || !time) {
//       setMessage('Please fill in all required fields (Client, Date, Time).');
//       setMessageType('error');
//       return;
//     }

//     try {
//       // Combine date and time into a single ISO string for the 'time' field
//       const dateTimeISO = new Date(`${date}T${time}`).toISOString();

//       // const response = await postAppointment({
//       //   client_id: parseInt(clientId),
//       //   time: dateTimeISO,
//       // });
//       const response = await axios.post('http://localhost:3000/appointments', {
//         appointment: {
//           client_id: parseInt(clientId),
//           time: dateTimeISO
//         }
//       });
//       setAppointments(response.data);
//       setMessage('Appointment scheduled successfully!');
//       setErrorAppointments(false);
//     } catch (err) {
//       setMessage(err.message || 'An error occurred while scheduling.');
//       setMessageType('error');
//       console.error('Schedule error:', err);
//     }
//   };

//   // Get today's date in YYYY-MM-DD format for min attribute
//   const getTodayDate = () => {
//     const today = new Date();
//     const year = today.getFullYear();
//     const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
//     const day = String(today.getDate()).padStart(2, '0');
//     return `${year}-${month}-${day}`;
//   };

//   return (
//     <div className="card">
//       <h2>Schedule New Appointment</h2>
//       <form onSubmit={handleSubmit}>
//         <div className="form-group">
//           <label htmlFor="client-select">Client:</label>
//           <select
//             id="client-select"
//             value={clientId}
//             onChange={(e) => setClientId(e.target.value)}
//             required
//           >
//             <option value="">Select a client</option>
//             {clients.map(client => (
//               <option key={client.id} value={client.id}>
//                 {client.name}
//               </option>
//             ))}
//           </select>
//         </div>
//         <div className="form-group-inline"> {/* New container for inline date/time */}
//           <div className="form-group-half">
//             <label htmlFor="appointment-date">Date:</label>
//             <input
//               type="date"
//               id="appointment-date"
//               value={date}
//               onChange={(e) => setDate(e.target.value)}
//               min={getTodayDate()} // Prevent selecting past dates
//               required
//             />
//           </div>
//           <div className="form-group-half">
//             <label htmlFor="appointment-time">Time:</label>
//             <input
//               type="time"
//               id="appointment-time"
//               value={time}
//               onChange={(e) => setTime(e.target.value)}
//               required
//             />
//           </div>
//         </div>
//         {/* Description input removed as per request */}
//         <button type="submit" className="button">Schedule Appointment</button>
//       </form>
//       {message && <p className={`message ${messageType}`}>{message}</p>}
//     </div>
//   );
// };
